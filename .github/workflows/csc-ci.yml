name: CSC CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  backend-linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: pip install -r backend/requirements.txt

      - name: Lint with flake8
        run: flake8 backend/*.py

  frontend-linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm ci
        working-directory: /home/runner/work/CoffeeShopCoders/CoffeeShopCoders/frontend

      - name: Lint code
        run: npm run lint
        working-directory: /home/runner/work/CoffeeShopCoders/CoffeeShopCoders/frontend
  
  publish-final-images:
    needs:
      - frontend-linting
      - backend-linting
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Detect frontend changes
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      - name: Set up Docker Buildx
        if: steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        if: steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push frontend image to Amazon ECR
        if: steps.filter.outputs.frontend == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: coffeeshopcoders
          IMAGE_TAG: coffee-shop-coders-frontend-latest
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cd ..

      - name: Build, tag, and push backend image to Amazon ECR
        if: steps.filter.outputs.backend == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: coffeeshopcoders
          IMAGE_TAG: coffee-shop-coders-backend-latest
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          